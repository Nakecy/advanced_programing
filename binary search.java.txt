
    def _init_(self, key, value):
        self.key = key
        self.value = value
        self.left = None
        self.right = None

class BinarySearchTree:
    def _init_(self):
        self.root = None

    def insert(self, key, value):
        if not self.root:
            self.root = TreeNode(key, value)
        else:
            self._insert(self.root, key, value)

    def _insert(self, node, key, value):
        if key < node.key:
            if node.left:
                self._insert(node.left, key, value)
            else:
                node.left = TreeNode(key, value)
        elif key > node.key:
            if node.right:
                self._insert(node.right, key, value)
            else:
                node.right = TreeNode(key, value)
        else:
            node.value = value  # Update value if key already exists

    def search(self, key):
        return self._search(self.root, key)

    def _search(self, node, key):
        if not node:
            return None
        if key == node.key:
            return node.value
        elif key < node.key:
            return self._search(node.left, key)
        else:
            return self._search(node.right, key)

    def delete(self, key):
        self.root = self._delete(self.root, key)

    def _delete(self, node, key):
        if not node:
            return node
        if key < node.key:
            node.left = self._delete(node.left, key)
        elif key > node.key:
            node.right = self._delete(node.right, key)
        else:
            if not node.left:
                return node.right
            if not node.right:
                return node.left
            temp = self._find_min(node.right)
            node.key, node.value = temp.key, temp.value
            node.right = self._delete(node.right, temp.key)
        return node

    def _find_min(self, node):
        while node.left:
            node = node.left
        return node

    def inorder_traversal(self):
        result = []
        self._inorder_traversal(self.root, result)
class TreeNode:       
 return result

    def _inorder_traversal(self, node, result):
        if node:
            self._inorder_traversal(node.left, result)
            result.append((node.key, node.value))
            self._inorder_traversal(node.right, result)

# Example usage
if _name_ == "_main_":
    bst = BinarySearchTree()
    bst.insert("David Opany", "david@example.com")
    bst.insert("Brain Simiyu", "brain@example.com")
    bst.insert("Derrick Omondi", "derrick@example.com")
    bst.insert("Titus Simeon", "titus@example.com")
    bst.insert("Obed Omayio", "obed@example.com")

    print("Inorder traversal:", bst.inorder_traversal())
    print("Search for Bob:", bst.search("Bob"))

    bst.delete("Bob")
    print("Inorder traversal after deleting Bob:", bst.inorder_traversal())